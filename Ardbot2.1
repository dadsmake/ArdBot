/*
TArdBot

Version history
Based off code from SainSmart, which was based from MakeZine.  
V1- Moves, Single Sensor
v1.1 - Better avoidadance
v2- Scanning sensor
v2.1 - Adding serial write of sensor and location data to 2x16 LCD

Utilizes Arduino Sensor Shield for I/O
Pins
2=Front Sensor Echo
3=Front Sensor Ping
5=LCD
6=Wheel - Right
7=Wheel - Right
8=Wheel - Left
9=Wheel - Lef
*/
#define DEBUG 1 // set to 1 to print to serial monitor, 0 to disable

  #include <SoftwareSerial.h> //Uses Serial Library
  #include <Servo.h> //uses servo library
    Servo headservo; // creates servo object
      const int EchoPin = 2; // Ultrasonic signal input
      const int TrigPin = 3; // Ultrasonic signal output
      const int LCDPin = 5; //LCD output
      const int leftmotorpin1 = 8; //signal output of Dc motor driven plate
      const int leftmotorpin2 = 9;
      const int rightmotorpin1 = 6;
      const int rightmotorpin2 = 7;
      const int HeadServopin = 10; // signal input of headservo 
      const int Sharppin = 11; // infrared output 
      const int maxStart = 800; //run dec time
      const int greenledPin = 13;
      const int redledPin = 12;
  SoftwareSerial mySerial = SoftwareSerial(255, LCDPin); //Sets LCD as mySerial
// Variables
  int isStart = maxStart; //start
  int currDist = 0; // distance
  boolean running = false; 
// Setup  
  void setup() {
    Serial.begin(9600);                 // Serial begin texting//signal input port
  pinMode(EchoPin, INPUT);
  pinMode(Sharppin, INPUT);
  pinMode(greenledPin, OUTPUT);
  pinMode(redledPin, OUTPUT);          
  pinMode(LCDPin, OUTPUT);
  digitalWrite(LCDPin, HIGH);
//signal output port
  for (int pinindex = 3; pinindex < 11; pinindex++) {
  pinMode(pinindex, OUTPUT); // set pins 3 to 10 as outputs
  }
//LCD Hello
  mySerial.begin(9600);
  delay(100);
  mySerial.write(12);                 // Clear             
  mySerial.write(17);                 // Turn backlight on
  delay(5);                           // Required delay
  mySerial.print("Hello, world...");  // First line
  mySerial.write(13);                 // Form feed
  mySerial.print("I am ArdBot 2.1");   // Second line
  delay(3000); 
  mySerial.write(13);                 // Form feed
  mySerial.print("I Will get STUCK");   // Second line
  delay(3000); 
  mySerial.write(212);                // Quarter note
  mySerial.write(220);                // A tone
  delay(3000);                        // Wait 3 seconds
  mySerial.write(18);                 // Turn backlight off

// headservo interface
  headservo.attach(HeadServopin); //start buffer movable head
    headservo.write(70);
      delay(2000);
    headservo.write(20);
      delay(2000);
    mySerial.print("Head Servo On");
  }
//debug
  void loop() {if(DEBUG){
    Serial.print("running:");
  if(running){
    Serial.println("true"); 
  }
  else{
    Serial.println("false"); 
  }
  }
  if (isStart <= 0) {
  if(running){
  totalhalt(); // stop!
  }
int findsomebody = digitalRead(Sharppin);
if(DEBUG){
Serial.print("findsomebody:"); 
Serial.println(findsomebody); 
} 
if(findsomebody > 0) {
isStart = maxStart; 
}delay(4000);
return;
}
isStart--;
delay(100);
if(DEBUG){
Serial.print("isStart: ");
Serial.println(isStart); 
}
currDist = MeasuringDistance(); //measure front distance 
if(DEBUG){
  mySerial.write(12);                 // Clear             
  mySerial.write(17);                 // Turn backlight on
  delay(5);                           // Required delay
  mySerial.print("Front Distance: ");  // Print Distance Label
  mySerial.println(currDist);          //Print Distance
  mySerial.write(212);                // Quarter note
  mySerial.write(220);                // A tone
  delay(3000);                        // Wait 3 seconds
  mySerial.write(18);                 // Turn backlight off
Serial.print("Current Distance: ");
Serial.println(currDist); 
} 
if(currDist > 30) {
nodanger();
}
else if(currDist < 15){backup();
randTrun();
}
else {
//whichway();
randTrun();
}
}
//measure distance, unit “cm”
long MeasuringDistance() {
long duration;
//pinMode(TrigPin, OUTPUT);
digitalWrite(TrigPin, LOW);
delayMicroseconds(2);
digitalWrite(TrigPin, HIGH);
delayMicroseconds(5);
digitalWrite(TrigPin, LOW);
//pinMode(EchoPin, INPUT);
duration = pulseIn(EchoPin, HIGH);return duration / 29 / 2;
}
// forward
void nodanger() {
running = true;
digitalWrite(greenledPin, HIGH);
digitalWrite(leftmotorpin1, HIGH);
digitalWrite(leftmotorpin2, LOW);
digitalWrite(rightmotorpin1, HIGH);
digitalWrite(rightmotorpin2, LOW);
digitalWrite(greenledPin, LOW);
return;
} 
//backward
void backup() {
running = true;
digitalWrite(greenledPin, HIGH);
digitalWrite(leftmotorpin1, LOW);
digitalWrite(leftmotorpin2, HIGH);
digitalWrite(rightmotorpin1, LOW);
digitalWrite(rightmotorpin2, HIGH);
digitalWrite(greenledPin, LOW);
delay(1000);
}//choose way
void whichway() {
running = true;
totalhalt(); // first stop!
headservo.write(20);
delay(1000);
int lDist = MeasuringDistance(); // check left distance
totalhalt(); // probe recovering
headservo.write(120); // turn the servo right
delay(1000);
int rDist = MeasuringDistance(); // check right distance
totalhalt(); // probe recovering
if(lDist < rDist) {
body_lturn();
}
else{
body_rturn();
}return;
}
//remodulate to the original status mechanically
void totalhalt() {
digitalWrite(redledPin, HIGH);
digitalWrite(leftmotorpin1, HIGH);
digitalWrite(leftmotorpin2, HIGH);
digitalWrite(rightmotorpin1, HIGH);
digitalWrite(rightmotorpin2, HIGH);
digitalWrite(redledPin, LOW);

headservo.write(70); // set servo to face forward
running = false; 
return;
delay(1000);
} 
//turn left
void body_lturn() {
running = true;
digitalWrite(leftmotorpin1, LOW);
digitalWrite(leftmotorpin2, HIGH);
digitalWrite(rightmotorpin1, HIGH);
digitalWrite(rightmotorpin2, LOW);delay(1500);
totalhalt();
} 
//turn right
void body_rturn() {
running = true;
digitalWrite(leftmotorpin1, HIGH);
digitalWrite(leftmotorpin2, LOW);
digitalWrite(rightmotorpin1, LOW);
digitalWrite(rightmotorpin2, HIGH);
delay(1500);
totalhalt();
} 
void randTrun(){
long randNumber;
randomSeed(analogRead(0));
randNumber = random(0, 10);
if(randNumber > 5) {
body_rturn();
}else
{
body_lturn();
} 
}
